
Installing NodeJS on the Raspberry Pi
======================================================================================================
https://pimylifeup.com/raspberry-pi-nodejs/

update the packages running on our operating system.
-----------------------------------------------------------------------------
sudo apt update
sudo apt upgrade


add the repository for the current LTS release of NodeJS to your Raspberry Pi
-----------------------------------------------------------------------------
curl -fsSL https://deb.nodesource.com/setup_17.x | sudo -E bash -


Install Package
-----------------------------------------------------------------------------
sudo apt install nodejs


Check node version
-----------------------------------------------------------------------------
node -v


Enter the parent directory of the react project and install the dependencies
-----------------------------------------------------------------------------
npm i


Run flask by first entering the parent directory containing the app.py file
-----------------------------------------------------------------------------
venv/bin/flask run --debugger --host=192.168.10.126

"proxy": "http://192.168.10.126:5000"

https://blog.miguelgrinberg.com/post/video-streaming-with-flask


pip install psutil
https://amalgjose.com/2020/04/27/simple-python-program-to-get-the-system-status-of-a-raspberry-pi/



GIT clone and pull
======================================================================================================
https://raspberrypi.stackexchange.com/a/59726

git config --global user.name "John Doe"
git config --global user.email johndoe@example.com 

git clone URL_of_the_repository

cd ~/home/pi/repository
git pull 



Modal onClose execute function in parent
======================================================================================================
// <!-- requires Tailwind CSS v2.0+ -->
// <!-- requires @headlessui/react -->


The modal dialog is a component residing in the rendered react component 

	// in pages/parent.js
	<ModalNewInstrument
		isOpen={isOpen}
		setIsOpen={setIsOpen}}
	/>


The component waits for isOpen state change:

	// in component/modal.js
	const ModalNewInstrument = ({ isOpen, setIsOpen }) => {

		return (
			<Dialog
				open={isOpen}
				onClose={() => setIsOpen(false)}
				className=''
			>

				{/* <!-- inner --> */}

			</Dialog>
		)
	}


parent controls the state, which opens the modal

	// in pages/parent.js
	let [isOpen, setIsOpen] = useState(false)


an onClick event fired from the parent sets state using a button click:

	// in pages/parent.js
	<button
		onClick={() => { setIsOpen(true)} }
		type='button'
		className=''
	>
	
		{/* <!-- inner --> */}
		
	</button>


For dynamic modal content generation, additional state must be initialized in the parent

	// in pages/parent.js
    const [contentModal, setContentModal] = useState("");
	

setContentModal will update the modal component 'content' argument residing in the parent:

	// in pages/parent.js
	<ModalNewInstrument
		isOpen={isOpen}
		setIsOpen={setIsOpen}
		content={contentModal} }
	/>


Now, in addition to the component waiting for isOpen state change, the component expects content
	
	// in component/modal.js
	const ModalNewInstrument = ({ isOpen, setIsOpen, content }) => {

		return (
			<Dialog
				open={isOpen}
				onClose={() => setIsOpen(false)}
				className=''
			>
			
				<div>
					{content.attribute}
				</div>

				{/* <!-- inner --> */}

			</Dialog>
		)
	}


This is handled by the same button click in the parent, but now executing an additional process

	// in pages/parent.js
	<button
		onClick={() => { setIsOpen(true); setContentModal(getRow(idx)) }}
		className=''
	>
	
		{/* <!-- inner --> */}
		
	</button>


The default behavior for closing the modal is simply hiding the overlay over the parent.
However, when submitting a modal form, a callback will also need to refresh a table in the parent.
From the parent, this is simple. Pass the additional argument, onModalSubmit, to the modal component. 
The passed parameters to onModalSubmit are bound to the method on initialization without firing.
This means our setTableData state for refreshing a table in the parent doesn't fire early.

https://stackoverflow.com/a/52469404

	// in pages/parent.js
	<ModalNewInstrument
		isOpen={isOpen}
		setIsOpen={setIsOpen}
		config={contentModal}
		onModalSubmit={onModalSubmit.bind(this, setTableData)}
	/>


From the perspective of the modal child component, the handleOnSubmit function is bound and awaits onSubmit.
The onSubmit is fired on form button click.
Instead of immediately closing the modal, the child async function handleOnSubmit processes the form.

	// in component/modal.js
	<form
		onSubmit={handleOnSubmit.bind(this, config.name, setIsOpen, onModalSubmit)}
		className=''
	>
	
		{/* <!-- form content --> */}
		
		<button
			type="submit"
			className=''
		>
			Save
		</button>
		
	</form>
	
	
On completion of the form processing
	>> the modal closes
	>> calls onModalSubmit, which is a reference to the onModalSubmit function passed by the parent
	
	// in component/modal.js
	async function handleOnSubmit(name, setIsOpen, onModalSubmit, e) {
		e.preventDefault()

		{/* <!-- fetch POST method --> */}

		// close modal on success
		if (isDone === true) {
			setIsOpen(false)
			onModalSubmit()
		}

	}



PyVISA
====================================================================
https://pyvisa.readthedocs.io/en/latest/
https://pyvisa.readthedocs.io/projects/pyvisa-py/en/latest/index.html#

If you do not install any extra library pyvisa-py will only be able to access tcpip resources.

GPIB resources requires to install a gpib driver.

https://linux-gpib.sourceforge.io/
https://www.cl.cam.ac.uk/~osc22/tutorials/gpib_usb_linux.html

https://www.ni.com/en-us/support/downloads/drivers/download.ni-visa.html#442675
Supported OS:
	CentOS		<< RedHat << Fedora
	RedHat		<< Fedora
	SUSE		<< RedHat << Fedora
	Ubuntu		<< Debian

Raspbian OS		<< Debian

https://www.linkedin.com/pulse/revisiting-keithleys-app-note-featuring-raspberry-pi-its-joshua-brown/

https://xdevs.com/guide/ni_gpib_rpi/
https://forums.raspberrypi.com/viewtopic.php?f=44&t=137781&p=918312#p918312

https://github.com/tin-/teckit



DOM Manipulation
====================================================================

The goal is to manipulate a DOM node by updating the inner HTML.
direct manipulation of dom node is not recommended in react...

	>> innerHTML: the DOM node will update with the injected HTML. React is not made aware of the modfication.
	>> dangerouslySetInnerHTML: React can ignore the inner HTML and allows direct DOM manipulation
	>> react state: Using react states and callbacks achieves the same effect and preserves react structure

CharJS
====================================================================
https://itnext.io/chartjs-tutorial-with-react-nextjs-with-examples-2f514fdc130

	
	
Papaparse
====================================================================
ReactJS fetch full CSV
https://stackoverflow.com/questions/68302182/reactjs-fetch-full-csv

https://stackoverflow.com/questions/39001078/get-just-header-from-remote-csv-file-using-papa-parse/43087596#43087596

Papaparse currently implements XMLHttpRequest (XHR) objects to send requests... Custom headers *could* be supported
https://github.com/mholt/PapaParse/issues/374#issuecomment-288356596



Accordion (collapsible) table rows
====================================================================

https://therichpost.com/reactjs-material-table-with-expandable-collapsible-rows-working/
https://codesandbox.io/s/collapsible-table-rows-in-react-ybb28
https://stackoverflow.com/questions/70983024/how-to-expand-and-collapse-the-table-rows-in-plain-react-js-show-only-one-row-i
https://gist.github.com/markerikson/bd9f03e0808558c5951e02f1aa98c563
https://stackoverflow.com/questions/53240115/semantic-ui-react-map-accordion-in-every-table-row
https://stackoverflow.com/questions/52108216/react-material-ui-multiple-collapse
https://stackoverflow.com/questions/70983024/how-to-expand-and-collapse-the-table-rows-in-plain-react-js-show-only-one-row-i

HeadlessUI may not work since wrapping componenents around table rows breaks tree inheritance
https://github.com/TanStack/table/discussions/2336#discussioncomment-18339
	>> There is an onClick prop of the table row that might work, but this would need to override the normal function of the headlessUI disclosure componenet
	>> Children are wrapped around <Disclosure.Button> ... </Disclosure.Button>
	>> This could possibly be overrided if the state of the button click is captured on the DOM
	>> <button id="headlessui-disclosure-button-:r0:" className="..." type="button" aria-expanded="false"> ... </button>

MaterialUI has an example where they incorporate an expandable panel below the table row
https://mui.com/material-ui/react-table/#collapsible-table

Very useful! headlessUI can render a default element as a different component.
https://headlessui.com/react/disclosure#rendering-a-different-element-for-a-component
	>> the Button default renders a <button>, Panel renders a <div>, but the 'as' prop can change the default componenet.
	>> <Disclosure.Button as="tr">
	


DOM virtualization for large lists 
====================================================================
Since hundreds of lines of test data are generated, displaying each line is inefficient.

react-virtualized held the crown until superseded by react-windows
	>>	https://www.npmjs.com/package/react-virtualized
	>>	https://www.npmjs.com/package/react-window

React window works by only rendering part of a large data set creating a more performant viewport

Many of the 'react-window' examples use an internal grid to control its own state. 
This might be an example for how to support html table tags...
	>>	https://stackoverflow.com/a/67420459

The proposal is to plant the entire list inside the virtual window with a sticky header + child scroll.
ModernUI has an example of this:
	>>	https://mui.com/material-ui/react-table/#virtualized-table
	>>	https://codesandbox.io/s/rpeb53?file=/demo.tsx
	
Note: react-virtualized / react-window break control+F
	>> however, there is go-to-index support... 
	
react-virtualized library offers a table component, unlike react-window.
	>>	https://github.com/bvaughn/react-window/issues/416#issuecomment-583123026
	
	here's a basic example:
		>>	https://stackoverflow.com/a/52165889

The official stance is to style non-table elements and instead use div elements to render the layout.
Just the same, the react-virtualized's table component is not comprised of HTML table elements either... just fancy div's on a grid.

There are various wrappers such as:
	>>	react-base-table
	>>	window-table
	>>	react-fluid-table
	
But they are so bulky!

Going back to react-window:
	Sticky rows (or headers) are supported:
	https://codesandbox.io/s/0mk3qwpl4l
	https://codesandbox.io/s/wild-dust-jtf42?file=/src/index.js:1544-1548

Table example, but headers are misaligned due to scroll bar:
	>>	https://codesandbox.io/s/pk78pvwnkx
	>>	https://window-table.netlify.app/

A good discussion on table designs from the main repo:
https://github.com/bvaughn/react-window/issues/60


FFT
====================================================================
https://thebreakfastpost.com/2015/10/18/ffts-in-javascript/
http://kissfft.sourceforge.net/
https://github.com/j-funk/kissfft-js/tree/master/src
https://www.nayuki.io/page/free-small-fft-in-multiple-languages

>>	Looks like KISSfft C library compiled to Javascript with Emscripten was the fastest...
>>	While native system computations (C compiled) were always better, at least Emscripten provides a performant client-side calculation for now...
>>	Preliminary benchmarks of C programs compiled to asm.js are usually within a factor of 2 slowdown over native compilation with clang.

https://github.com/j-funk/js-dsp-test/

Cool interactive tools
https://arachnoid.com/SigGen/index.html



ChartJS: Input range slider
====================================================================

User interactions have no effect because an <input> with value prop is considered as controlled. 
https://stackoverflow.com/a/36123370
https://www.youtube.com/watch?v=FAyDsmyVnPA

The video slices the labels (x axis) to adjust the content being displayed.
However, our pointData is an object {x: 0, y: 0}, which has no labels.
The first commit on this topic sliced the data each time the slider range updated.
This wasn't efficient since the chart required to be redrawn with new data each time.

Commit #59 proposes dynamically changing the config x max value onChange of the range slider.
Still evaluating performance of this method. Larger range steps (such as '10') help compensate for the update lag.

I'm not sure what occurs behind the curtain, but looks like chartJS redraws the canvas each time the range changes regardless of whether the data has changed.
Is the performance better? Not sure, but I would argue this pattern is more approachable than slice the labels / data object.

https://stackoverflow.com/a/67916563



ChartJS: 'window is not defined' when using 
====================================================================
https://github.com/reactjs/react-chartjs/issues/57
https://bobbyhadz.com/blog/typescript-uncaught-referenceerror-exports-is-not-defined

I was struggling to get pan feature of the chartjs zoom plugin working. When the page isn't rehydrated, everything works.
However, looks like the window is lost on refresh, which forces a new render of the page.

'window is not defined' 

As there is no window while doing server rendering we cannot do much as a part of this lib.

So, perhaps this content can be rendered once the page has mounted?
https://stackoverflow.com/a/59403018

However, do to the design of webpack, we can't dynamic import libraries like this...


Another solution is to disable server-side rendering (SSR) for this page:
https://stackoverflow.com/a/57848309
https://stackoverflow.com/a/57848309/16181400


Looks to have been a NextJS issue... which makes sense

Instead of the plot component being imported as usual, we use the suggested dynamic non-ssr approach in the link above.



Setting state inline within Return
====================================================================
This is very useful as it doesn't require a callback. Arrow functions are a compact form of function expression. I need to use this more...

e is the event of the fired element. For instance, the change of a select option.
onChange={e => setSomeState(e.target.value)}

somewhere else in the return, the state can be updated. In this case, the truth string has its own inline logic

{(isRelative === 'true') ? ('MLW/f0') : ('MLW (HZ)')}


Rendering twice or thrice on page refresh
====================================================================
Not sure why instruments.js and spectrum.js (and perhaps more) are updated three or so times on page refresh...


Numpy-like array functions
====================================================================
To get FFT working, I have ported kissFFT using emscripten

All the other dsp functions of computing distortion values are next. 
This process is slow but has minimal risk in rework.
Not everything is entirely 1:1 however, since Numpy has an array C-like struct

stdlib is a npm library with an emphasis on numerical and scientific computing applications.
Could be useful in the future, but for now, I'm migrating the numpy functions I was already using.
	>>	https://www.npmjs.com/package/@stdlib/stdlib


	
Zip, map, and function references
====================================================================
One of the fun things about porting numpy code to javascript is understanding map, zip, and zipWith functions more.

For instance, the base.js file has two functions:
	1. zip
	2. zipWith
	3. where

for 'zip', when x1 and x2 are array-like, they are zipped element-by-element into a new array of length equal to the shortest axis:

	zip(x1, x2)
	
	x1.map((x, i) => func(x, x2[i]))
	
	zip(x1, x2) = [[a1, a2], [b1, b2], [c1, c2]]

'zipWith' does something similiar, but passes the element-by-element argument to a reference function argument

	zipWith(x1, x2, less_equal)
	
	x1.map((x, i) => func(x, x2[i]))
	
	[ ( a1 <= a2 ), ( b1 <= b2 ), ( c1 <= c2 ) ]
	
	
'where' somewhat does the operation of zipWith, but isn't zipping two arrays.
Instead, one array is passed with a condition, and the boolean result is mapped to a user-defined value

	where(less_than(a, 5), a, 10*a)  // if true, return a, else 10*a
	
	x1.map((x, i) => func(x, x2[i]))
	
	[ ( a1 <= a2 ), ( b1 <= b2 ), ( c1 <= c2 ) ]
	
	[   ( true ), 	  ( false ), 	( false )  ] ==> [ ( a ), ( 10*a ), ( 10*a ) ] 


More FFT
====================================================================
https://toughengineer.github.io/demo/dsp/fft-perf/

	>>	fft.js has great performance in Chrome, the same order of magnitude as the best binding implementation of KISS FFT 
	
https://github.com/toughengineer/demo/tree/main/dsp/fft-perf

https://github.com/AWSM-WASM/PulseFFT

WebAssembly is downloaded as binary data and needs to be instantiated before it can be used.

https://www.npmjs.com/package/assemblyscript
https://www.npmjs.com/package/as-bind

https://codeburst.io/getting-started-with-react-and-webassembly-using-hooks-441818c91608

https://github.com/j-funk/js-dsp-test/



More Javascript math libraries 
====================================================================
This one doesn't look too bad.
	>>	https://github.com/PatGleeson101/mathicall.js
	>> >>	several array-based (matrix) multiplication implementations
	>> >>	line 119 of src/matrix/matrix.src.js
	>> >>	uses explicit looping rather than recursive calls. functionally the same, but verbose
	>> >> >>	slightly more memory overhead per function call and appears to support only up to 2d axis (this is why recursion is better)


Module not found: Can't resolve 'fs'
====================================================================
https://stackoverflow.com/a/62011612

add the following tot he packages.json file in the react project

"browser": {
  "fs": false,
  "path": false,
  "os": false
}

react and angular do not support modules in node like "fs" and "path"


Importing headaches
====================================================================
https://stackoverflow.com/a/33179024


mapping values from a Float32Array
====================================================================
This one caught me by surprise. Since the FFT returns a Float32Array, it needs to be convertered to Array before being mapped.
Float32Array#map() expects the callback to return a number, and the method itself returns a Float32Array. 

https://stackoverflow.com/a/54640282


FFT
====================================================================
https://dsp.stackexchange.com/questions/1262/creating-a-spectrogram
https://electronics.stackexchange.com/a/12412



Zero Padding
====================================================================
https://mechanicalvibration.com/Zero_Padding_FFTs.html

Strictly speaking, the FFT operates on 2^n datasets

zero padding is a method for adding zeros to the data to expand the dataset to a power of 2 length
For instance, we may have 1023 data points, but wish to run a 1024 point FFT.

Unfortunately, tones can become indistinguishable and zero padding the FFT does not help the situtation.
To resolve these, one must take a longer data sample. Or... truncate the dataset...

This is fine, but we lose spectral resolution when we truncate below sample length.

A good opportunity is to rewrite the distortion analyzer backend to perform 2^n sample length captures. 

Since zero-padding does not affect DFT magnitude of the original N-DFT Samples, we still divide by the fft length for the signal only
https://dsp.stackexchange.com/a/65994

Spectral Leakage:
https://dsp.stackexchange.com/a/34216

When zero padding is employed on M samples out to N bins the additional DFT frequency samples are interpolated.

Windowing may improve this by tapering the signal ends...
https://dsp.stackexchange.com/a/13740


FFT yields two-times the actual frequency
====================================================================
x-axis limits should be bounded between ±Fn, where ‘Fn’ is the Nyquist frequency.  
https://www.mathworks.com/matlabcentral/answers/493756-fft-yields-two-times-the-actual-frequency#answer_403840

However, I don't think this is the issue here.

For some reason, this implementation of kissFFT is double the intended output length
https://github.com/mborgerding/kissfft

kiss_fftr c implementation is defined at line 71 of kissfft-js/src/tools/kiss_fftr.c 

let's explore optimization techniques similiar to in kissFFT:

	int kiss_fftr_next_fast_size( int x ) {
		int ceil_half_x = (x+1)/2;
		return 2 * kiss_fft_next_fast_size( ceil_half_x );
	}
	
	int kiss_fft_next_fast_size(int n)
	{
		while(1) {
			int m=n;
			while ( (m%2) == 0 ) m/=2;
			while ( (m%3) == 0 ) m/=3;
			while ( (m%5) == 0 ) m/=5;
			if (m<=1)
				break; /* n is completely factorable by twos, threes, and fives */
			n++;
		}
		return n;
	}


Common FFT Scaling Factors
====================================================================
https://stackoverflow.com/a/5629093

Scaling is a big problem with fixed point FFTs.
Some solve it with scaling to prevent overflow (as kissfft does), but this loses low bits.

This is sort of a trigonometric interpolation.

https://stackoverflow.com/a/51732562

kissfft uses overlap add method for computing FFT
https://en.wikipedia.org/wiki/Overlap%E2%80%93add_method


Floating point math!
====================================================================
https://0.30000000000000004.com/

Kahan sum
https://en.wikipedia.org/wiki/Kahan_summation_algorithm

deimal.js
https://www.npmjs.com/package/decimal.js?activeTab=versions

Kahan sum (javascript)
https://github.com/viktors/node-kahan/blob/master/index.js


Shewchuk algorithm (fsum or aka msum)
The comment alleges that the first algorithm in the article is incorrect.
Lot's of overhead
https://code.activestate.com/recipes/393090-binary-floating-point-summation-accurate-to-full-p/

Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric Predicates
http://www-2.cs.cmu.edu/afs/cs/project/quake/public/papers/robust-arithmetic.ps


FFT size discrepancy
====================================================================
So far, I'm a bit perplexed with kissFFT, here.

My sample data length, N, is 12000
This length is even, thus:

	> fft length = (12000/2) + 1 = 6001

(the + 1 is the DC component)

However, when I compute the FFTR using kissFFT,

	> fft length = 120002 (6001 + 6001) ???

I'm not familiar with this translation coming from numpy fft package.

Consequently, this is what I do:

	> var out = rfft.forward(buffered)
	> fft_length = out.length
	> yf_rfft = out.map((yf) => (yf / fft_length) * amplitude_correction_factor);
	> xf_rfft = np.rfftfreq(2 * (out.length-1), 1. / Fs);

The key issue is that I must adjust my rfftfreq spacing!

In numpy, I would do:

	> xf_rfft = np.rfftfreq(N, 1. / Fs);

However, now I must set

	> N = 2*(fft_length - 1)

That's nuts!

Also, blackman and other windowing filters are not being handled appropriately. 

KissFFT doing some sort of filtering? I read a lot about 'overlap add' method for computing FFT...



Interpreting kissFFT output
====================================================================

Previous issue now fixed!

https://stackoverflow.com/a/6741403

Line 327 of:
https://github.com/j-funk/js-dsp-test/blob/master/fft/test.js

	> for (var j = 0; j < size; ++j) {
	>    total += Math.sqrt(out[j*2] * out[j*2] + out[j*2+1] * out[j*2+1]);
	> }
	
I believe my error was in not accounting for the imaginary component of the FFTR output.

I would have expected these components to not exist, though... However, this did account for double the length though.

The array is composed of alternating real and imaginary components:
	> Re [0] + Img [1], Re [2] + Img [3], ...
	> if FFTR has a length of (N/2 + 1), but the the array is composed of [Re, Im, Re, Im, ..., ...,]
	> then FFTR was providing a length of 2 x (N/2 + 1), which was what I saw!
	
This required a new method for computing the consecutive pair magnitude:

	export function magnitude(arr) {
		// returns a new array with every next element pair magnitude computed
		
		const res = [];
		for (let idx = 0; idx < arr.length; idx += 2) {
			res.push(sqrt(arr[idx] ** 2 + (arr[idx + 1] || 0) ** 2));
		};

		return res;
	};
	
After that, everything fell into place.


useRouter and dynamic routing
====================================================================
Two issues needed to be resolved. 
	> First, I needed dynamic routing based on the specific filename selected from the history list
		> https://stackoverflow.com/a/65638865
		> nextjs persistent layout mechanic ( <Link /> ) is handled by useRouter
		> instead of using Link and <a>, I just stylized a button with a handleClick method.
		> https://stackoverflow.com/a/66162437
	
	> Second, when redirected to the dynamic slug page [csv].js or [distortion].js, I needed to retrieve the filename
		> router.query helped here. However, the object was undefined since router wasn't ready... Well, this wasn't verified because...
		> the other issue was that I was improperly handling the object in the first place!
			> Turns out based on the slug file name is the key with the name as the value
			
		> example:
		
		file: [csv].js
		const router = useRouter()
		const slug = router.query
		// Object {csv: <slug name>}
		
		const slugname = slug.csv



Formatting number strings
====================================================================
The goal was to format numbers as strings in engineering notation (exponent of ten must be divisible by three)

Came across toLocaleString:
https://stackoverflow.com/a/50978675

	const myNumb = 1000000000000000000000;
	console.log( myNumb ); // 1e+21



Found further resource on GPIB on raspberry pi
====================================================================
https://github.com/PhilippCo/meas_rpi/tree/34e79d18a82ee682320eb41275da76377ee3983d

Had some independent instrument libraries with similar implementation as us
https://github.com/PhilippCo/testgear

Fluke 8588A
https://github.com/PhilippCo/testgear/blob/d4e782d1771347f459cfa49dceeaa28adcd4cbf4/testgear/Fluke/F8588A.py

Fluke 5730A
https://github.com/PhilippCo/testgear/blob/d4e782d1771347f459cfa49dceeaa28adcd4cbf4/testgear/Fluke/F5730A.py



Webcam + Flask
====================================================================

miguel's video streaming tutorial (flask developer)
	> https://blog.miguelgrinberg.com/post/video-streaming-with-flask
	> instructions for implementing a jpg frame stream (1.jpg, 2.jpg, 3.jpg)
	> has alternative options to use the rpi camera. This is different than a usb webcam.
	
This example uses cv2 to provide the camera capture capability
	> https://stackoverflow.com/a/54787912
	> a generator method yields new frame and appropriate http headers

cv2
	> https://stackoverflow.com/a/10425504
	> cv2 has everything returned as NumPy objects

pip install cv2
	> https://pypi.org/project/opencv-python/#description
	
	> There are four different packages (see options 1, 2, 3 and 4 below) and you should SELECT ONLY ONE OF THEM.
	> Do not install multiple different packages in the same environment.
	> There is no plugin architecture: all the packages use the same namespace (cv2).
	
	> Option 1 - for desktop: (NOT WHAT WE WANT FOR RASPBERRY PI)
	> pip install opencv-python
		>
		> might be a good demo using the library's gui:
		> https://www.geeksforgeeks.org/python-opencv-capture-video-from-camera/
	
	> Option 3 - lightweight (no gui) best for headless servers (great for raspberry pi)
	> pip install opencv-python-headless

The demo being developed first will probably use the desktop version.
However, Raspberry Pi should install the headless option and the stream the frames to the frontend

Good tutorials on implementing exactly this:
	> https://towardsdatascience.com/how-to-display-video-streaming-from-a-webcam-using-flask-7a15e26fbab8
	> https://towardsdatascience.com/video-streaming-in-web-browsers-with-opencv-flask-93a38846fe00
	> https://medium.datadriveninvestor.com/video-streaming-using-flask-and-opencv-c464bf8473d6
	> https://towardsdatascience.com/face-detection-in-2-minutes-using-opencv-python-90f89d7c0f81
	
Default face detection haarcascades
	> https://github.com/opencv/opencv/blob/3.4/data/haarcascades/haarcascade_frontalface_alt.xml

This might be a good example for implemetning user Authentication
	> https://github.com/scottbarnesg/smart-sec-cam
	> uses cv2 to detect motion on security camera and then begins recording for some length of time



Webcam as React component:
====================================================================
https://medium.com/@jadomene99/integrating-your-opencv-project-into-a-react-component-using-flask-6bcf909c07f4



shutdown webcam stream due to inactivity
====================================================================
when the server runs for five seconds without any clients, it will shut its camera off and stop all background activity.
As soon as a client connects again the thread is restarted.
	> https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited

	# if there hasn't been any clients asking for frames in
	# the last 5 seconds then stop the thread
	if time.time() - BaseCamera.last_access > 5:
		frames_iterator.close()
		print('Stopping camera thread due to inactivity.')
		break

Works when client closes the tab/window
Still troublesome with react applications. persistent layouts don't inherently close resources to the page.



Create a threaded event class for the webcam to reduce CPU load per client request
====================================================================
	> Currently seeing >90% CPU utilization. Not good!
	> https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited
	
	> CameraEvent class enables multiple clients to be able to wait individually for a new frame.

after following miguels solution, cpu utilization dropped -10% (-50% when not using face detect)



websockets as webcam stream alternative
====================================================================
The techniques above can be used to keep a connection between the client and the server alive for a long time.
This allows the server to push new information the moment it becomes available. 
Web Socket protocol is a more efficient way to achieve this, but isn't as compatible

>> more on this later, I think... Taking a break on this front for now.



thermal imager image processing
====================================================================

To start, I needed to find valid .is2 files...
This repository had a few.
They also claim to be able to read FLUKE Thermography Files (.is2)
	> https://github.com/potynobg/Thermal

Support for FLIR images written in R...
	> https://github.com/gtatters/Thermimage

This converts an is2 to png
	> https://github.com/matthiasbock/fluke-ti-tool/blob/master/fluke2png.c
	
A .is2 is not unique to Fluke
	> http://www.grayess.com/software/irt-cronista/

FLIR image extractor
	> https://github.com/ITVRoC/FlirImageExtractor

https://www.mathworks.com/matlabcentral/answers/374507-when-i-give-a-fluke-ti400-is2-image-as-input-i-am-getting-maximum-variable-size-exceeded-error-in-ma

https://github.com/detecttechnologies/Thermal-Image-Analysis

https://github.com/RioEsgueva/IrS2reader

Many .is2 files can be renamed with the .zip extension and then opened to review the files packed inside the original .is2
https://exiftool.org/forum/index.php?topic=10216.0

IR_00017.is2 ==> IR_00017.zip works
DAN00959.is2 ==> DAN00959.zip works
	
	
	
