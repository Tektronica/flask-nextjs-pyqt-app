
Installing NodeJS on the Raspberry Pi
======================================================================================================
https://pimylifeup.com/raspberry-pi-nodejs/

update the packages running on our operating system.
-----------------------------------------------------------------------------
sudo apt update
sudo apt upgrade


add the repository for the current LTS release of NodeJS to your Raspberry Pi
-----------------------------------------------------------------------------
curl -fsSL https://deb.nodesource.com/setup_17.x | sudo -E bash -


Install Package
-----------------------------------------------------------------------------
sudo apt install nodejs


Check node version
-----------------------------------------------------------------------------
node -v


Enter the parent directory of the react project and install the dependencies
-----------------------------------------------------------------------------
npm i


Run flask by first entering the parent directory containing the app.py file
-----------------------------------------------------------------------------
venv/bin/flask run --debugger --host=192.168.10.126

"proxy": "http://192.168.10.126:5000"

https://blog.miguelgrinberg.com/post/video-streaming-with-flask


pip install psutil
https://amalgjose.com/2020/04/27/simple-python-program-to-get-the-system-status-of-a-raspberry-pi/



GIT clone and pull
======================================================================================================
https://raspberrypi.stackexchange.com/a/59726

git config --global user.name "John Doe"
git config --global user.email johndoe@example.com 

git clone URL_of_the_repository

cd ~/home/pi/repository
git pull 



Modal onClose execute function in parent
======================================================================================================
// <!-- requires Tailwind CSS v2.0+ -->
// <!-- requires @headlessui/react -->


The modal dialog is a component residing in the rendered react component 

	// in pages/parent.js
	<ModalNewInstrument
		isOpen={isOpen}
		setIsOpen={setIsOpen}}
	/>


The component waits for isOpen state change:

	// in component/modal.js
	const ModalNewInstrument = ({ isOpen, setIsOpen }) => {

		return (
			<Dialog
				open={isOpen}
				onClose={() => setIsOpen(false)}
				className=''
			>

				{/* <!-- inner --> */}

			</Dialog>
		)
	}


parent controls the state, which opens the modal

	// in pages/parent.js
	let [isOpen, setIsOpen] = useState(false)


an onClick event fired from the parent sets state using a button click:

	// in pages/parent.js
	<button
		onClick={() => { setIsOpen(true)} }
		type='button'
		className=''
	>
	
		{/* <!-- inner --> */}
		
	</button>


For dynamic modal content generation, additional state must be initialized in the parent

	// in pages/parent.js
    const [contentModal, setContentModal] = useState("");
	

setContentModal will update the modal component 'content' argument residing in the parent:

	// in pages/parent.js
	<ModalNewInstrument
		isOpen={isOpen}
		setIsOpen={setIsOpen}
		content={contentModal} }
	/>


Now, in addition to the component waiting for isOpen state change, the component expects content
	
	// in component/modal.js
	const ModalNewInstrument = ({ isOpen, setIsOpen, content }) => {

		return (
			<Dialog
				open={isOpen}
				onClose={() => setIsOpen(false)}
				className=''
			>
			
				<div>
					{content.attribute}
				</div>

				{/* <!-- inner --> */}

			</Dialog>
		)
	}


This is handled by the same button click in the parent, but now executing an additional process

	// in pages/parent.js
	<button
		onClick={() => { setIsOpen(true); setContentModal(getRow(idx)) }}
		className=''
	>
	
		{/* <!-- inner --> */}
		
	</button>


The default behavior for closing the modal is simply hiding the overlay over the parent.
However, when submitting a modal form, a callback will also need to refresh a table in the parent.
From the parent, this is simple. Pass the additional argument, onModalSubmit, to the modal component. 
The passed parameters to onModalSubmit are bound to the method on initialization without firing.
This means our setTableData state for refreshing a table in the parent doesn't fire early.

https://stackoverflow.com/a/52469404

	// in pages/parent.js
	<ModalNewInstrument
		isOpen={isOpen}
		setIsOpen={setIsOpen}
		config={contentModal}
		onModalSubmit={onModalSubmit.bind(this, setTableData)}
	/>


From the perspective of the modal child component, the handleOnSubmit function is bound and awaits onSubmit.
The onSubmit is fired on form button click.
Instead of immediately closing the modal, the child async function handleOnSubmit processes the form.

	// in component/modal.js
	<form
		onSubmit={handleOnSubmit.bind(this, config.name, setIsOpen, onModalSubmit)}
		className=''
	>
	
		{/* <!-- form content --> */}
		
		<button
			type="submit"
			className=''
		>
			Save
		</button>
		
	</form>
	
	
On completion of the form processing
	>> the modal closes
	>> calls onModalSubmit, which is a reference to the onModalSubmit function passed by the parent
	
	// in component/modal.js
	async function handleOnSubmit(name, setIsOpen, onModalSubmit, e) {
		e.preventDefault()

		{/* <!-- fetch POST method --> */}

		// close modal on success
		if (isDone === true) {
			setIsOpen(false)
			onModalSubmit()
		}

	}



PyVISA
====================================================================
https://pyvisa.readthedocs.io/en/latest/
https://pyvisa.readthedocs.io/projects/pyvisa-py/en/latest/index.html#

If you do not install any extra library pyvisa-py will only be able to access tcpip resources.

GPIB resources requires to install a gpib driver.

https://linux-gpib.sourceforge.io/
https://www.cl.cam.ac.uk/~osc22/tutorials/gpib_usb_linux.html

https://www.ni.com/en-us/support/downloads/drivers/download.ni-visa.html#442675
Supported OS:
	CentOS		<< RedHat << Fedora
	RedHat		<< Fedora
	SUSE		<< RedHat << Fedora
	Ubuntu		<< Debian

Raspbian OS		<< Debian

https://www.linkedin.com/pulse/revisiting-keithleys-app-note-featuring-raspberry-pi-its-joshua-brown/

https://xdevs.com/guide/ni_gpib_rpi/
https://forums.raspberrypi.com/viewtopic.php?f=44&t=137781&p=918312#p918312

https://github.com/tin-/teckit



DOM Manipulation
====================================================================

The goal is to manipulate a DOM node by updating the inner HTML.
direct manipulation of dom node is not recommended in react...

	>> innerHTML: the DOM node will update with the injected HTML. React is not made aware of the modfication.
	>> dangerouslySetInnerHTML: React can ignore the inner HTML and allows direct DOM manipulation
	>> react state: Using react states and callbacks achieves the same effect and preserves react structure

CharJS
====================================================================
https://itnext.io/chartjs-tutorial-with-react-nextjs-with-examples-2f514fdc130
	
	
	
Papaparse
====================================================================
ReactJS fetch full CSV
https://stackoverflow.com/questions/68302182/reactjs-fetch-full-csv

https://stackoverflow.com/questions/39001078/get-just-header-from-remote-csv-file-using-papa-parse/43087596#43087596

Papaparse currently implements XMLHttpRequest (XHR) objects to send requests... Custom headers *could* be supported
https://github.com/mholt/PapaParse/issues/374#issuecomment-288356596



Accordion (collapsible) table rows
====================================================================

https://therichpost.com/reactjs-material-table-with-expandable-collapsible-rows-working/
https://codesandbox.io/s/collapsible-table-rows-in-react-ybb28
https://stackoverflow.com/questions/70983024/how-to-expand-and-collapse-the-table-rows-in-plain-react-js-show-only-one-row-i
https://gist.github.com/markerikson/bd9f03e0808558c5951e02f1aa98c563
https://stackoverflow.com/questions/53240115/semantic-ui-react-map-accordion-in-every-table-row
https://stackoverflow.com/questions/52108216/react-material-ui-multiple-collapse
https://stackoverflow.com/questions/70983024/how-to-expand-and-collapse-the-table-rows-in-plain-react-js-show-only-one-row-i

HeadlessUI may not work since wrapping componenents around table rows breaks tree inheritance
https://github.com/TanStack/table/discussions/2336#discussioncomment-18339
	>> There is an onClick prop of the table row that might work, but this would need to override the normal function of the headlessUI disclosure componenet
	>> Children are wrapped around <Disclosure.Button> ... </Disclosure.Button>
	>> This could possibly be overrided if the state of the button click is captured on the DOM
	>> <button id="headlessui-disclosure-button-:r0:" className="..." type="button" aria-expanded="false"> ... </button>

MaterialUI has an example where they incorporate an expandable panel below the table row
https://mui.com/material-ui/react-table/#collapsible-table

Very useful! headlessUI can render a default element as a different component.
https://headlessui.com/react/disclosure#rendering-a-different-element-for-a-component
	>> the Button default renders a <button>, Panel renders a <div>, but the 'as' prop can change the default componenet.
	>> <Disclosure.Button as="tr">
	


DOM virtualization for large lists 
====================================================================
Since hundreds of lines of test data are generated, displaying each line is inefficient.

react-virtualized held the crown until superseded by react-windows
	>>	https://www.npmjs.com/package/react-virtualized
	>>	https://www.npmjs.com/package/react-window

React window works by only rendering part of a large data set creating a more performant viewport

Many of the 'react-window' examples use an internal grid to control its own state. 
This might be an example for how to support html table tags...
	>>	https://stackoverflow.com/a/67420459

The proposal is to plant the entire list inside the virtual window with a sticky header + child scroll.
ModernUI has an example of this:
	>>	https://mui.com/material-ui/react-table/#virtualized-table
	>>	https://codesandbox.io/s/rpeb53?file=/demo.tsx
	
Note: react-virtualized / react-window break control+F
	>> however, there is go-to-index support... 
	
react-virtualized library offers a table component, unlike react-window.
	>>	https://github.com/bvaughn/react-window/issues/416#issuecomment-583123026
	
	here's a basic example:
		>>	https://stackoverflow.com/a/52165889

The official stance is to style non-table elements and instead use div elements to render the layout.
Just the same, the react-virtualized's table component is not comprised of HTML table elements either... just fancy div's on a grid.

There are various wrappers such as:
	>>	react-base-table
	>>	window-table
	>>	react-fluid-table
	
But they are so bulky!

Going back to react-window:
	Sticky rows (or headers) are supported:
	https://codesandbox.io/s/0mk3qwpl4l
	https://codesandbox.io/s/wild-dust-jtf42?file=/src/index.js:1544-1548

Table example, but headers are misaligned due to scroll bar:
	>>	https://codesandbox.io/s/pk78pvwnkx
	>>	https://window-table.netlify.app/

A good discussion on table designs from the main repo:
https://github.com/bvaughn/react-window/issues/60


FFT
====================================================================
https://thebreakfastpost.com/2015/10/18/ffts-in-javascript/
http://kissfft.sourceforge.net/
https://github.com/j-funk/kissfft-js/tree/master/src
https://www.nayuki.io/page/free-small-fft-in-multiple-languages

>>	Looks like KISSfft C library compiled to Javascript with Emscripten was the fastest...
>>	While native system computations (C compiled) were always better, at least Emscripten provides a performant client-side calculation for now...
>>	Preliminary benchmarks of C programs compiled to asm.js are usually within a factor of 2 slowdown over native compilation with clang.

https://github.com/j-funk/js-dsp-test/

Cool interactive tools
https://arachnoid.com/SigGen/index.html



ChartJS: Input range slider
====================================================================

User interactions have no effect because an <input> with value prop is considered as controlled. 
https://stackoverflow.com/a/36123370
https://www.youtube.com/watch?v=FAyDsmyVnPA

The video slices the labels (x axis) to adjust the content being displayed.
However, our pointData is an object {x: 0, y: 0}, which has no labels.
The first commit on this topic sliced the data each time the slider range updated.
This wasn't efficient since the chart required to be redrawn with new data each time.

Commit #59 proposes dynamically changing the config x max value onChange of the range slider.
Still evaluating performance of this method. Larger range steps (such as '10') help compensate for the update lag.

I'm not sure what occurs behind the curtain, but looks like chartJS redraws the canvas each time the range changes regardless of whether the data has changed.
Is the performance better? Not sure, but I would argue this pattern is more approachable than slice the labels / data object.

https://stackoverflow.com/a/67916563



ChartJS: 'window is not defined' when using 
====================================================================
https://github.com/reactjs/react-chartjs/issues/57
https://bobbyhadz.com/blog/typescript-uncaught-referenceerror-exports-is-not-defined

I was struggling to get pan feature of the chartjs zoom plugin working. When the page isn't rehydrated, everything works.
However, looks like the window is lost on refresh, which forces a new render of the page.

'window is not defined' 

As there is no window while doing server rendering we cannot do much as a part of this lib.

So, perhaps this content can be rendered once the page has mounted?
https://stackoverflow.com/a/59403018

However, do to the design of webpack, we can't dynamic import libraries like this...


Another solution is to disable server-side rendering (SSR) for this page:
https://stackoverflow.com/a/57848309
https://stackoverflow.com/a/57848309/16181400


Looks to have been a NextJS issue... which makes sense

Instead of the plot component being imported as usual, we use the suggested dynamic non-ssr approach in the link above.



Setting state inline within Return
====================================================================
This is very useful as it doesn't require a callback. Arrow functions are a compact form of function expression. I need to use this more...

e is the event of the fired element. For instance, the change of a select option.
onChange={e => setSomeState(e.target.value)}

somewhere else in the return, the state can be updated. In this case, the truth string has its own inline logic

{(isRelative === 'true') ? ('MLW/f0') : ('MLW (HZ)')}


Rendering twice or thrice on page refresh
====================================================================
Not sure why instruments.js and spectrum.js (and perhaps more) are updated three or so times on page refresh...



